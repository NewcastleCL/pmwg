% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{init.pmwgs}
\alias{init.pmwgs}
\title{Initialise values for the random effects}
\usage{
\method{init}{pmwgs}(x, theta_mu = NULL, theta_sig = NULL,
  alpha = NULL, display_progress = TRUE, ...)
}
\arguments{
\item{x}{The sampler object that provides the parameters.}

\item{theta_mu}{An array of starting values for the group means}

\item{theta_sig}{An array of starting values for the group covariance matrix}

\item{alpha}{An array of starting values for the subject means.}

\item{display_progress}{Display a progress bar during sampling}

\item{...}{Further arguments passed to or from other methods.}
}
\value{
The sampler object but with initial values set for latent_theta_mu
}
\description{
Takes the starting values for the group mean and variance, and subject level
means. All arrays must match the appropriate shape.
}
\details{
For example, with 5 parameters and 10 subjects, the group means must be a
vector of length 5, the group variance must be an array of 5 x 5, and the
subject means must be 5 x 10.

Alternatively the if argument values for the starting points are left at the
default (NULL) then starting points will be sampled from the prior for group
level values, or for subject level means they will be sampled from the
multivariate normal using the group level means and variance.
}
\examples{
lba_ll <- function(x, data) {
  x <- exp(x)
  if (any(data$rt < x["t0"])) {
    return(-1e10)
  }
  sum(
    log(
      rtdists::dLBA(rt = data$rt,
                    response = data$correct,
                    A = x["A"],
                    b = x["A"] + x[c("b1", "b2", "b3")][data$condition],
                    t0 = x["t0"],
                    mean_v = x[c("v1", "v2")],
                    sd_v = c(1, 1),
                    silent = TRUE)
    )
  )
}
sampler <- pmwgs(forstmann,
                 c("b1", "b2", "b3", "A", "v1", "v2", "t0"),
                 lba_ll
           )
sampler <- init(sampler, theta_mu=rnorm(7), theta_sig=diag(rep(0.01, 7)))
}
